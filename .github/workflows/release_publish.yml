name: "Release: Publish"
run-name: "Release: ${{ github.event.head_commit.message }}"

on:
  push:
    branches:
      - release

jobs:
  Release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      tag: ${{ steps.prep-release.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: PrepRelease
        id: prep-release
        run: |
          pip install --upgrade hatch
          hatch env create release
          NEXT_SEMVER=$(hatch run release:version)

          # The format of the tag must match the pattern in pyproject.toml -> tool.semantic_release.tag_format
          TAG="v$NEXT_SEMVER"

          git config --local user.email "client-software-ci@amazon.com"
          git config --local user.name "client-software-ci"

          git branch merge-back/$NEXT_SEMVER
          git tag -a $TAG -m "Release $TAG"

          echo "NEXT_SEMVER=$NEXT_SEMVER" >> $GITHUB_ENV
          {
            echo 'RELEASE_NOTES<<EOF'
            python .github/scripts/get_latest_changelog.py
            echo EOF
          } >> $GITHUB_ENV

      # Tag must be made before building so the generated _version.py files have the correct version
      - name: Build
        run: |
          hatch build

      - name: PushRelease
        env:
          GH_TOKEN: ${{ secrets.CI_TOKEN }}
          TAG: ${{ steps.prep-release.outputs.tag }}
        run: |
          git push origin $TAG merge-back/$NEXT_SEMVER

          gh release create $TAG \
            dist/playground-$NEXT_SEMVER-py3-none-any.whl \
            dist/playground-$NEXT_SEMVER.tar.gz \
            --notes "$RELEASE_NOTES"

          # Needs "Allow GitHub Actions to create and approve pull requests" under Settings > Actions
          gh pr create --head merge-back/$NEXT_SEMVER --base mainline --title "chore(merge-back): $NEXT_SEMVER" --body "$RELEASE_NOTES"

  PublishToRepository:
    needs: Release
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
    env:
      CODEARTIFACT_REGION: "us-west-2"
      CODEARTIFACT_DOMAIN: ${{ secrets.CODEARTIFACT_DOMAIN }}
      CODEARTIFACT_ACCOUNT_ID: ${{ secrets.CODEARTIFACT_ACCOUNT_ID }}
      CODEARTIFACT_REPOSITORY: ${{ secrets.CODEARTIFACT_REPOSITORY }}
      CUSTOMER_DOMAIN: ${{ secrets.CUSTOMER_DOMAIN }}
      CUSTOMER_REPOSITORY: ${{ secrets.CUSTOMER_REPOSITORY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.Release.outputs.tag }}
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEARTIFACT_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install --upgrade hatch
          pip install --upgrade twine

      - name: Build
        run: hatch build

      - name: Publish to Repository
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --query authorizationToken --output text`
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --format pypi --query repositoryEndpoint --output text`
          twine upload dist/*

      - name: Publish to Customer Repository
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ secrets.CUSTOMER_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --query authorizationToken --output text`
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CUSTOMER_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} --repository ${{ secrets.CUSTOMER_REPOSITORY }} --format pypi --query repositoryEndpoint --output text`
          twine upload dist/*

  PublishToService:
    needs: Release
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEBUILD_RELEASE_PUBLISH_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Run CodeBuild
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: openjd-sessions-for-python-Publish
          hide-cloudwatch-logs: true
