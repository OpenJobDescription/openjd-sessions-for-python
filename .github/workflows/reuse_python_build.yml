name: Python Build

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string

jobs:
  Python:
    # We've seen some deadlocks in tests run on the CI. Hard-cap the job runtime
    # to prevent those from running too long before being terminated.
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v4
      if: ${{ !inputs.branch }}
      
    - uses: actions/checkout@v4
      if: ${{ inputs.branch }}
      with:
        ref: ${{ inputs.branch }}
        fetch-depth: 0
    
    - name: Create Windows Test User
      if: ${{ matrix.os == 'windows-latest'}}
      run: |
        $username = 'openjdtester'
        $plaintext_password = -join([char[]](48..122) | Get-Random -Count 16)
        $password = ConvertTo-SecureString $plaintext_password -AsPlainText -Force
        New-LocalUser -Name $username -Password $password
        echo OJD_SESSIONS_USER_NAME=$username >> $env:GITHUB_ENV
        echo "::add-mask::$plaintext_password"
        echo OJD_SESSIONS_USER_PASSWORD=$plaintext_password >> $env:GITHUB_ENV

    - name: Create Linux Test User
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        set -eou pipefail

        TARGET_USER=targetuser
        SHARED_GROUP=sharedgroup
        DISJOINT_USER=disjointuser
        DISJOINT_GROUP=disjointgroup

        echo HOSTUSER=$(whoami)

        sudo addgroup $SHARED_GROUP
        sudo useradd -ms /bin/bash -G $SHARED_GROUP $TARGET_USER
        sudo usermod -a -G $SHARED_GROUP $(whoami)
        # sudo usermod -g $SHARED_GROUP $(whoami)
        echo "$(whoami) ALL=($TARGET_USER,$(whoami)) NOPASSWD: ALL" | sudo tee -a /etc/sudoers.d/$(whoami)

        sudo addgroup $DISJOINT_GROUP
        sudo useradd -ms /bin/bash -G $DISJOINT_GROUP $DISJOINT_USER

        for user in $TARGET_USER $DISJOINT_USER $(whoami)
        do
          echo "$user is UID: $(id -u $user)"
          groups $user
        done

        echo OPENJD_TEST_SUDO_TARGET_USER=$TARGET_USER >> $GITHUB_ENV
        echo OPENJD_TEST_SUDO_SHARED_GROUP=$SHARED_GROUP >> $GITHUB_ENV
        echo OPENJD_TEST_SUDO_DISJOINT_USER=$DISJOINT_USER >> $GITHUB_ENV
        echo OPENJD_TEST_SUDO_DISJOINT_GROUP=$DISJOINT_GROUP >> $GITHUB_ENV

        umask
        cat /etc/group

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: pip install --upgrade -r requirements-development.txt

    - name: Run Linting
      run: hatch run lint

    - name: Run Tests
      run: hatch run test
